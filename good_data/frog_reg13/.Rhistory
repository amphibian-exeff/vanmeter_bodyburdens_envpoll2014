ggplot_gtable(dd_TF),ggplot_gtable(dd_TT), ncol=1)
data_plot_Pendimethalin=mlrfrog[which(mlrfrog$Chemical=="Pendimethalin"), ]
p_Pendimethalin=ggplot(data_plot_Pendimethalin, aes(x= HabFac , y = logTissueConc,  fill = Species)) + geom_boxplot()+
ylab("Tissue Concentrations (ug/g)") + ggtitle("Pendimethalin") + Fig1_opts# + coord_cartesian(ylim = c(0.0, 1.5))
dd_Pendimethalin=ggplot_build(p_Pendimethalin)
dd_Pendimethalin$data[[1]]$xmin=c(1.00, 1.70, 2.00, 2.30, 3.00)
dd_Pendimethalin$data[[1]]$x=c(1.10, 1.800, 2.10, 2.40, 3.10)
dd_Pendimethalin$data[[1]]$xmax=c(1.20, 1.90, 2.20, 2.50, 3.20)
dd_Pendimethalin$data[[1]]$fill=c('#3D3D3D', '#5C5C5C', '#7A7A7A', '#999999', '#B8B8B8')
grid.arrange(ggplot_gtable(dd_Imidacloprid), ggplot_gtable(dd_Pendimethalin), ggplot_gtable(dd_TA),
ggplot_gtable(dd_TF),ggplot_gtable(dd_TT), ncol=1)
grid.text(label="Cricket \n frog", x = 0.135, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Leopard \n frog", x = 0.255, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Barking \n treefrog", x = 0.46, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Gray \n treefrog", x = 0.555, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Green \n treefrog", x = 0.65, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Fowlers \n toad", x = 0.85, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Narrowmouth \n toad", x = 0.94, y = 0.015, gp=gpar(fontsize=11, col="black"))
dev.off()
dev.off()
dev.off()
jpeg(file = "Fig1_scale.jpg",  width = 8000, height = 14000, units = "px", res = 800) #
grid.arrange(ggplot_gtable(dd_Imidacloprid), ggplot_gtable(dd_Pendimethalin), ggplot_gtable(dd_TA),
ggplot_gtable(dd_TF),ggplot_gtable(dd_TT), ncol=1)
grid.text(label="Cricket \n frog", x = 0.135, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Leopard \n frog", x = 0.255, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Barking \n treefrog", x = 0.46, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Gray \n treefrog", x = 0.555, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Green \n treefrog", x = 0.65, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Fowlers \n toad", x = 0.85, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Narrowmouth \n toad", x = 0.94, y = 0.015, gp=gpar(fontsize=11, col="black"))
dev.off()
dd_TT=ggplot_build(p_TT)
dd_TT$data[[1]]$xmin=c(0.60, 1.00, 1.70, 2.00, 2.30, 3.00, 3.30)
dd_TT$data[[1]]$x=c(0.70, 1.10, 1.800, 2.10, 2.40, 3.10, 3.40)
dd_TT$data[[1]]$xmax=c(0.80, 1.20, 1.90, 2.20, 2.50, 3.20, 3.50)
#dd_TT$data[[1]]$fill[1:7]=c('#1F1F1F', '#3D3D3D', '#5C5C5C', '#7A7A7A', '#999999', '#B8B8B8', '#D6D6D6')
dd_TT$data[[1]]$fill[1:7]=c('#b10026', '#e31a1c', '#fc4e2a', '#fd8d3c', '#feb24c', '#fed976', '#ffffb2')
jpeg(file = "Fig1_scale.jpg",  width = 8000, height = 14000, units = "px", res = 800) #
grid.arrange(ggplot_gtable(dd_Imidacloprid), ggplot_gtable(dd_Pendimethalin), ggplot_gtable(dd_TA),
ggplot_gtable(dd_TF),ggplot_gtable(dd_TT), ncol=1)
grid.text(label="Cricket \n frog", x = 0.135, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Leopard \n frog", x = 0.255, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Barking \n treefrog", x = 0.46, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Gray \n treefrog", x = 0.555, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Green \n treefrog", x = 0.65, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Fowlers \n toad", x = 0.85, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Narrowmouth \n toad", x = 0.94, y = 0.015, gp=gpar(fontsize=11, col="black"))
dev.off()
data_plot_TF=mlrfrog[which(mlrfrog$Chemical=="Total Fipronil"), ]
p_TF=ggplot(data_plot_TF, aes(x= HabFac , y = logTissueConc,  fill = Species)) + geom_boxplot()+
ylab("Tissue Concentrations (ug/g)") + ggtitle("Total Fipronil") + Fig1_opts
dd_TF=ggplot_build(p_TF)
dd_TF$data[[1]]$xmin=c(1.00, 1.70, 2.00, 2.30, 3.00)
dd_TF$data[[1]]$x=c(1.10, 1.800, 2.10, 2.40, 3.10)
dd_TF$data[[1]]$xmax=c(1.20, 1.90, 2.20, 2.50, 3.20)
#dd_TF$data[[1]]$fill=c('#3D3D3D', '#5C5C5C', '#7A7A7A', '#999999', '#B8B8B8')
dd_TF$data[[1]]$fill[1:7]=c('#e31a1c', '#fc4e2a', '#fd8d3c', '#feb24c', '#fed976')
dd_TF$data[[1]]$fill[1:7]=c('#b10026', '#e31a1c', '#fc4e2a', '#fd8d3c', '#feb24c', '#fed976', '#ffffb2')
data_plot_TF=mlrfrog[which(mlrfrog$Chemical=="Total Fipronil"), ]
p_TF=ggplot(data_plot_TF, aes(x= HabFac , y = logTissueConc,  fill = Species)) + geom_boxplot()+
ylab("Tissue Concentrations (ug/g)") + ggtitle("Total Fipronil") + Fig1_opts
dd_TF=ggplot_build(p_TF)
dd_TF$data[[1]]$xmin=c(1.00, 1.70, 2.00, 2.30, 3.00)
dd_TF$data[[1]]$x=c(1.10, 1.800, 2.10, 2.40, 3.10)
dd_TF$data[[1]]$xmax=c(1.20, 1.90, 2.20, 2.50, 3.20)
#dd_TF$data[[1]]$fill=c('#3D3D3D', '#5C5C5C', '#7A7A7A', '#999999', '#B8B8B8')
dd_TF$data[[1]]$fill[1:7]=c('#b10026', '#e31a1c', '#fc4e2a', '#fd8d3c', '#feb24c', '#fed976', '#ffffb2')
dd_TF$data[[1]]$fill=c('#b10026', '#e31a1c', '#fc4e2a', '#fd8d3c', '#feb24c', '#fed976', '#ffffb2')
data_plot_TF=mlrfrog[which(mlrfrog$Chemical=="Total Fipronil"), ]
p_TF=ggplot(data_plot_TF, aes(x= HabFac , y = logTissueConc,  fill = Species)) + geom_boxplot()+
ylab("Tissue Concentrations (ug/g)") + ggtitle("Total Fipronil") + Fig1_opts
dd_TF=ggplot_build(p_TF)
dd_TF$data[[1]]$xmin=c(1.00, 1.70, 2.00, 2.30, 3.00)
dd_TF$data[[1]]$x=c(1.10, 1.800, 2.10, 2.40, 3.10)
dd_TF$data[[1]]$xmax=c(1.20, 1.90, 2.20, 2.50, 3.20)
#dd_TF$data[[1]]$fill=c('#3D3D3D', '#5C5C5C', '#7A7A7A', '#999999', '#B8B8B8')
dd_TF$data[[1]]$fill=c('#b10026', '#e31a1c', '#fc4e2a', '#fd8d3c', '#feb24c', '#fed976', '#ffffb2')
dd_TF$data[[1]]$fill=c('#e31a1c', '#fc4e2a', '#fd8d3c', '#feb24c', '#fed976')
jpeg(file = "Fig1_scale.jpg",  width = 8000, height = 14000, units = "px", res = 800) #
grid.arrange(ggplot_gtable(dd_Imidacloprid), ggplot_gtable(dd_Pendimethalin), ggplot_gtable(dd_TA),
ggplot_gtable(dd_TF),ggplot_gtable(dd_TT), ncol=1)
grid.text(label="Cricket \n frog", x = 0.135, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Leopard \n frog", x = 0.255, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Barking \n treefrog", x = 0.46, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Gray \n treefrog", x = 0.555, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Green \n treefrog", x = 0.65, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Fowlers \n toad", x = 0.85, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Narrowmouth \n toad", x = 0.94, y = 0.015, gp=gpar(fontsize=11, col="black"))
dev.off()
data_plot_Imidacloprid=mlrfrog[which(mlrfrog$Chemical=="Imidacloprid"), ]
p_Imidacloprid=ggplot(data_plot_Imidacloprid, aes(x= HabFac , y = logTissueConc,  fill = Species)) + geom_boxplot()+
ylab("Tissue Concentrations (ug/g)") + ggtitle("Imidacloprid") + Fig1_opts_1
dd_Imidacloprid=ggplot_build(p_Imidacloprid)
dd_Imidacloprid$data[[1]]$xmin=c(0.60, 1.70, 2.00, 2.30, 3.30)
dd_Imidacloprid$data[[1]]$x=c(0.70, 1.800, 2.10, 2.40, 3.40)
dd_Imidacloprid$data[[1]]$xmax=c(0.80, 1.90, 2.20, 2.50,3.50)
#dd_Imidacloprid$data[[1]]$fill=c('#1F1F1F', '#5C5C5C', '#7A7A7A', '#999999', '#D6D6D6')
dd_Imidacloprid$data[[1]]$fill[1:7]=c('#b10026', '#e31a1c', '#fc4e2a', '#fd8d3c', '#feb24c', '#fed976', '#ffffb2')
# p1=grid.draw(ggplot_gtable(dd_Imidacloprid))
data_plot_Pendimethalin=mlrfrog[which(mlrfrog$Chemical=="Pendimethalin"), ]
dd_Imidacloprid$data[[1]]$fill=c('#b10026', '#fc4e2a', '#fd8d3c', '#feb24c', '#ffffb2')
# p1=grid.draw(ggplot_gtable(dd_Imidacloprid))
data_plot_Pendimethalin=mlrfrog[which(mlrfrog$Chemical=="Pendimethalin"), ]
p_Pendimethalin=ggplot(data_plot_Pendimethalin, aes(x= HabFac , y = logTissueConc,  fill = Species)) + geom_boxplot()+
ylab("Tissue Concentrations (ug/g)") + ggtitle("Pendimethalin") + Fig1_opts# + coord_cartesian(ylim = c(0.0, 1.5))
dd_Pendimethalin=ggplot_build(p_Pendimethalin)
dd_Pendimethalin$data[[1]]$xmin=c(1.00, 1.70, 2.00, 2.30, 3.00)
dd_Pendimethalin$data[[1]]$x=c(1.10, 1.800, 2.10, 2.40, 3.10)
dd_Pendimethalin$data[[1]]$xmax=c(1.20, 1.90, 2.20, 2.50, 3.20)
#dd_Pendimethalin$data[[1]]$fill=c('#3D3D3D', '#5C5C5C', '#7A7A7A', '#999999', '#B8B8B8')
dd_Pendimethalin$data[[1]]$fill=c('#e31a1c', '#fc4e2a', '#fd8d3c', '#feb24c', '#fed976')
#dd_Pendimethalin$data[[1]]$fill=c(scale_fill_brewer(palette="OrRd")[1],scale_fill_brewer(palette="OrRd")[4],
#                                  scale_fill_brewer(palette="OrRd")[8],scale_fill_brewer(palette="OrRd")[12],
#                                  scale_fill_brewer(palette="OrRd")[15])
# p2=grid.draw(ggplot_gtable(dd_Pendimethalin))
data_plot_TA=mlrfrog[which(mlrfrog$Chemical=="Total Atrazine"), ]
p_TA=ggplot(data_plot_TA, aes(x= HabFac , y = logTissueConc,  fill = Species)) + geom_boxplot()+
ylab("Tissue Concentrations (ug/g)") + ggtitle("Total Atrazine") + Fig1_opts
dd_TA=ggplot_build(p_TA)
dd_TA$data[[1]]$xmin=c(1.00, 1.70, 2.00, 2.30, 3.00)
dd_TA$data[[1]]$x=c(1.10, 1.800, 2.10, 2.40, 3.10)
dd_TA$data[[1]]$xmax=c(1.20, 1.90, 2.20, 2.50, 3.20)
#dd_TA$data[[1]]$fill=c('#3D3D3D', '#5C5C5C', '#7A7A7A', '#999999', '#B8B8B8')
dd_TA$data[[1]]$fill=c('#e31a1c', '#fc4e2a', '#fd8d3c', '#feb24c', '#fed976')
# p3=grid.draw(ggplot_gtable(dd_TA))
data_plot_TF=mlrfrog[which(mlrfrog$Chemical=="Total Fipronil"), ]
p_TF=ggplot(data_plot_TF, aes(x= HabFac , y = logTissueConc,  fill = Species)) + geom_boxplot()+
ylab("Tissue Concentrations (ug/g)") + ggtitle("Total Fipronil") + Fig1_opts
dd_TF=ggplot_build(p_TF)
dd_TF$data[[1]]$xmin=c(1.00, 1.70, 2.00, 2.30, 3.00)
dd_TF$data[[1]]$x=c(1.10, 1.800, 2.10, 2.40, 3.10)
dd_TF$data[[1]]$xmax=c(1.20, 1.90, 2.20, 2.50, 3.20)
#dd_TF$data[[1]]$fill=c('#3D3D3D', '#5C5C5C', '#7A7A7A', '#999999', '#B8B8B8')
dd_TF$data[[1]]$fill=c('#e31a1c', '#fc4e2a', '#fd8d3c', '#feb24c', '#fed976')
# p4=grid.draw(ggplot_gtable(dd_TF))
data_plot_TT=mlrfrog[which(mlrfrog$Chemical=="Total Triadimefon"), ]
#
# limit_plot=c(levels(data_plot_TT$HabFac), "A", "B", "C", "D")
# break_plot = c(0.75, 1.25, 1.75, 2.00, 2.25, 2.75, 3.25)
# species_label=unique(mlrfrog$Species)
p_TT=ggplot(data_plot_TT, aes(x= HabFac , y = logTissueConc,  fill = Species)) + geom_boxplot()+
ylab("Tissue Concentrations (ug/g)") + ggtitle("Total Triadimefon") + Fig1_opts + theme(plot.margin=unit(c(0,0,1.2,0),"cm"))
dd_TT=ggplot_build(p_TT)
dd_TT$data[[1]]$xmin=c(0.60, 1.00, 1.70, 2.00, 2.30, 3.00, 3.30)
dd_TT$data[[1]]$x=c(0.70, 1.10, 1.800, 2.10, 2.40, 3.10, 3.40)
dd_TT$data[[1]]$xmax=c(0.80, 1.20, 1.90, 2.20, 2.50, 3.20, 3.50)
#dd_TT$data[[1]]$fill[1:7]=c('#1F1F1F', '#3D3D3D', '#5C5C5C', '#7A7A7A', '#999999', '#B8B8B8', '#D6D6D6')
dd_TT$data[[1]]$fill[1:7]=c('#b10026', '#e31a1c', '#fc4e2a', '#fd8d3c', '#feb24c', '#fed976', '#ffffb2')
# g_legend<-function(a.gplot){
#   tmp <- ggplot_gtable(ggplot_build(a.gplot))
#   leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
#   legend <- tmp$grobs[[leg]]
#   return(legend)}
#
# legend <- g_legend(p_TT)
# postscript("Fig1.eps", width = 10000, height = 20000, horizontal=TRUE)
jpeg(file = "Fig1_scale.jpg",  width = 8000, height = 14000, units = "px", res = 800) #
grid.arrange(ggplot_gtable(dd_Imidacloprid), ggplot_gtable(dd_Pendimethalin), ggplot_gtable(dd_TA),
ggplot_gtable(dd_TF),ggplot_gtable(dd_TT), ncol=1)
grid.text(label="Cricket \n frog", x = 0.135, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Leopard \n frog", x = 0.255, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Barking \n treefrog", x = 0.46, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Gray \n treefrog", x = 0.555, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Green \n treefrog", x = 0.65, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Fowlers \n toad", x = 0.85, y = 0.015, gp=gpar(fontsize=11, col="black"))
grid.text(label="Narrowmouth \n toad", x = 0.94, y = 0.015, gp=gpar(fontsize=11, col="black"))
dev.off()
View(mlrfrog)
library(modeest)
library(QuantPsyc)
####load data############
frog_root<-"D:\\Dropbox\\amphib_dermalexposure\\DATA\\good_data\\frog_reg13\\" #PC path
setwd(frog_root)
raw_data<-read.table(paste(frog_root,"good_data.csv",sep=""), header = TRUE, sep = ",") #Read data into a variable
raw_data_t1 = raw_data[which(raw_data$good==1 & raw_data$Application=="Soil"),] #select good data and Soil application
Chemical_selec_index=is.element(raw_data_t1$Chemical,c('Imidacloprid','Pendimethalin','Total Atrazine',
'Total Fipronil','Total Triadimefon'))
raw_data_t2 = raw_data_t1[Chemical_selec_index,] #select only five chemicals
row.names(raw_data_t2)<-NULL
raw_data_t2$bodyweight2=raw_data_t2$bodyweight/raw_data_t2$X  #average the weight by number of frogs
raw_data_t2$SA_cm2_2=raw_data_t2$SA_cm2/raw_data_t2$X  #average the surface area by number of frogs
raw_data_t2 = raw_data_t1[Chemical_selec_index,] #select only five chemicals
row.names(raw_data_t2)<-NULL
raw_data_t2$bodyweight2=raw_data_t2$bodyweight/raw_data_t2$X  #average the weight by number of frogs
raw_data_t2$SA_cm2_2=raw_data_t2$SA_cm2/raw_data_t2$X  #average the surface area by number of frogs
mlrfrog_raw = subset(raw_data_t2, select=c(Chemical, Species, app_rate_g_cm2, AppFactor, TissueConc, SoilConc, logKow, BCF, VapPrs_mPa, Koc_gmL,
HabFac, bodyweight2, SA_cm2_2, molmass_gmol, Solat20C_mgL, Density_gcm3))
mlrfrog_raw$Koc_gmL=as.numeric(as.character(mlrfrog_raw$Koc_gmL)) #convert factors to numerics
mlrfrog_raw$Koc_gmL=log10(mlrfrog_raw$Koc_gmL)
names(mlrfrog_raw)[10]='logkoc'
mlrfrog_raw$AppFactor=log10(mlrfrog_raw$AppFactor)
names(mlrfrog_raw)[4]='logAppFactor'
mlrfrog_raw$SoilConc=log10(mlrfrog_raw$SoilConc)
names(mlrfrog_raw)[6]='logSoilConc'
mlrfrog_raw$TissueConc=log(mlrfrog_raw$TissueConc)
names(mlrfrog_raw)[5]='logTissueConc'
mlrfrog_raw$BCF=log10(mlrfrog_raw$BCF)
names(mlrfrog_raw)[8]='logBCF'
mlrfrog_raw$molmass_gmol=log10(mlrfrog_raw$molmass_gmol)
names(mlrfrog_raw)[14]='logMol'
mlrfrog_raw$Solat20C_mgL=log10(mlrfrog_raw$Solat20C_mgL)
names(mlrfrog_raw)[15]='logSol'
mlrfrog_raw$Density_gcm3=log10(mlrfrog_raw$Density_gcm3)
names(mlrfrog_raw)[16]='logDen'
mlrfrog_raw = mlrfrog_raw[which(mlrfrog_raw$Species != "Mole salamander"),] #remove Mole salamander
row.names(mlrfrog_raw)<-NULL
View(mlrfrog_raw)
#########################################
C_name_pool=c('Imidacloprid','Pendimethalin','Total Atrazine','Total Fipronil','Total Triadimefon')
for (k in 1:5){
C_name=C_name_pool[k]
mlrfrog=mlrfrog_raw[which(mlrfrog_raw$Chemical != C_name),]
mlrfrog_CV=mlrfrog_raw[which(mlrfrog_raw$Chemical == C_name),]
#####Based on the correlation matrix, I can only keep a.Species, b.HabFac, c.logkoc,
mlrfrog_APP_ind=subset(mlrfrog,select=c(Species, HabFac, logkoc, logMol, logSol, logDen))
mlrfrog_APP_ind_CV=subset(mlrfrog_CV,select=c(Species, HabFac, logkoc, logMol, logSol, logDen))
####CHECK CORRELATIONS###########
cor_matrix=cor(subset(mlrfrog_APP_ind,select=-c(Species, HabFac)))
name_final_logAPP=paste("cor_matrix", "_", k, sep="")
assign(name_final_logAPP, (cor_matrix))
nod=dim(mlrfrog_APP_ind)[2]
detail_select=expand.grid(rep(list(c(TRUE,FALSE)),nod))
detail_select=detail_select[-which(detail_select$Var1==TRUE & detail_select$Var2==TRUE),]
row.names(detail_select)=NULL
names(detail_select)=names(mlrfrog_APP_ind)
regressors <- names(mlrfrog_APP_ind)
total_ita=dim(detail_select)[1]
R2_logAPP=array(dim=c(total_ita-1,12))
colnames(R2_logAPP)=c("R2", "Adj_R2", "AIC", "BIC", "MSE_T", "LL_T", "LL_R", "df_T", "df_R", "N_reg", "N_var", "RMSE_R")
###replace true and false in combination by variable names
detail_select_v=detail_select
d_names=names(detail_select)
for (i in d_names){
eval(parse(text=paste("detail_select_v$",as.name(i),"[", "detail_select_v$",as.name(i),"==",TRUE,"]=","i", sep="")))
eval(parse(text=paste("detail_select_v$",as.name(i),"[", "detail_select_v$",as.name(i),"==",FALSE,"]=",NA, sep="")))
}
detail_select_v[is.na(detail_select_v)] = " "
NCV_res=c()
CV_res=c()
NCV_obs=c()
CV_obs=c()
for (i in 1:(total_ita-1)){
vect=as.matrix(detail_select)[i,]
lm_temp=lm(as.formula(paste("mlrfrog$logAppFactor", paste(regressors[vect], collapse=" + "), sep="~")), data=subset(mlrfrog_APP_ind, select=regressors[vect]))
name_logAPP=paste("sum_logAPP", i, "_", k, sep="")
assign(name_logAPP, (lm_temp))
lm_temp_CV=predict(lm_temp, data.frame(mlrfrog_CV$logAppFactor, subset(mlrfrog_APP_ind_CV, select=regressors[vect])), se.fit = TRUE)
name_logAPP_CV=paste("sum_logAPP_CV", i, "_", k, sep="")
assign(name_logAPP_CV, (lm_temp_CV))
###creat a matrix to hold residules for final check##
NCV_res=cbind(NCV_res, lm_temp$residuals)
NCV_obs=cbind(NCV_obs, mlrfrog$logAppFactor)
CV_res_temp=lm_temp_CV$fit-mlrfrog_CV$logAppFactor
CV_res=cbind(CV_res, CV_res_temp)
CV_obs=cbind(CV_obs, mlrfrog_CV$logAppFactor)
R2_logAPP[i,1]=summary(lm_temp)$r.squared
R2_logAPP[i,2]=summary(lm_temp)$adj.r.squared
R2_logAPP[i,3]=AIC(lm_temp)
R2_logAPP[i,4]=BIC(lm_temp)
R2_logAPP[i,5]=sum(lm_temp_CV$fit-mlrfrog_CV$logAppFactor)^2/(dim(mlrfrog_CV)[1]-length(lm_temp$coefficients))
R2_logAPP[i,6]=loglike_test((lm_temp_CV$fit-mlrfrog_CV$logAppFactor), 0, R2_logAPP[i,5]^0.5)
R2_logAPP[i,7]=logLik(lm_temp)
R2_logAPP[i,8]=dim(mlrfrog_CV)[1]-length(lm_temp$coefficients)
R2_logAPP[i,9]=lm_temp$df.residual
R2_logAPP[i,10]=length(lm_temp$coefficients)-1
R2_logAPP[i,11]=sum(vect)
R2_logAPP[i,12]=summary(lm_temp)$sigma
}
#  (1 "R2", 2"Adj_R2", 3"AIC", 4"BIC", 5"MSE_T", 6"LL_T", 7"LL_R", 8"df_T", 9"df_R", 10"N_reg", 11"N_var")
colnames(NCV_res)=seq(1:dim(NCV_res)[2])
name_NCV_res=paste("NCV_res", "_", k, sep="")
assign(name_NCV_res, (NCV_res))
colnames(CV_res)=seq(1:dim(CV_res)[2])
name_CV_res=paste("CV_res", "_", k, sep="")
assign(name_CV_res, (CV_res))
colnames(NCV_obs)=seq(1:dim(NCV_obs)[2])
name_NCV_obs=paste("NCV_obs", "_", k, sep="")
assign(name_NCV_obs, (NCV_obs))
colnames(CV_obs)=seq(1:dim(CV_obs)[2])
name_CV_obs=paste("CV_obs", "_", k, sep="")
assign(name_CV_obs, (CV_obs))
name_R2_logAPP=paste("R2_logAPP", "_", k, sep="")
assign(name_R2_logAPP, (R2_logAPP))
###The highest R2(1), adjusted R2(2), lowest AIC(3) and BIC(4)
col_best_logAPP=c(apply(R2_logAPP,2,max)[1:2],apply(R2_logAPP,2,min)[3:4])
final_logAPP=c(which(R2_logAPP[,1]==col_best_logAPP[1]),which(R2_logAPP[,2]==col_best_logAPP[2]),
which(R2_logAPP[,3]==col_best_logAPP[3]),which(R2_logAPP[,4]==col_best_logAPP[4]))
name_final_logAPP=paste("final_logAPP", "_", k, sep="")
assign(name_final_logAPP, (final_logAPP))
}
CV_res_all=rbind(CV_res_1,CV_res_2,CV_res_3,CV_res_4,CV_res_5)
NCV_res_all=rbind(NCV_res_1,NCV_res_2,NCV_res_3,NCV_res_4,NCV_res_5)
NCV_obs_all=rbind(NCV_obs_1,NCV_obs_2,NCV_obs_3,NCV_obs_4,NCV_obs_5)
NCV_obs_all_g=cbind(c(rep(1, dim(NCV_obs_1)[1]), rep(2, dim(NCV_obs_2)[1]), rep(3, dim(NCV_obs_3)[1]),
rep(4, dim(NCV_obs_4)[1]), rep(5, dim(NCV_obs_5)[1])))
R_NCV_all=cbind(R2_logAPP_1[,12],R2_logAPP_2[,12],R2_logAPP_3[,12],R2_logAPP_4[,12],R2_logAPP_5[,12]) #RMSE training
R_CV_all=cbind(R2_logAPP_1[,5],R2_logAPP_2[,5],R2_logAPP_3[,5],R2_logAPP_4[,5],R2_logAPP_5[,5])^0.5  #RMSE testing
LL_NCV_all=rowSums(cbind(R2_logAPP_1[,7],R2_logAPP_2[,7],R2_logAPP_3[,7],R2_logAPP_4[,7],R2_logAPP_5[,7])) #LL training
CV_obs_all=rbind(CV_obs_1,CV_obs_2,CV_obs_3,CV_obs_4,CV_obs_5)
MC_t=1000
NCV_MC_RMSE_Final=data.frame(matrix(ncol = MC_t, nrow = 47))
NCV_MC_LL_Final=data.frame(matrix(ncol = MC_t, nrow = 47))
CV_LL_Final=data.frame(matrix(ncol = 1, nrow = 47))
for (kk in 1:MC_t){
NCV_obs_MC_index=apply(NCV_obs_all, 2, function(t) sample(length(t), 131, replace=TRUE))  #draw 131 samples of each combinaions
for (jj in 1:dim(NCV_obs_all)[2]){
NCV_res_MC_temp=NCV_res_all[NCV_obs_MC_index[,jj],jj]
NCV_obs_all_g_temp=NCV_obs_all_g[NCV_obs_MC_index[,jj]]
R_NCV_temp=R_NCV_all[jj,]
R_CV_all_temp=R_CV_all[jj,]
NCV_MC_RMSE_Final[jj,kk]=(var(NCV_res_MC_temp)+mean(NCV_res_MC_temp)^2)^0.5
NCV_ll_temp_1=loglike_test(NCV_res_MC_temp[which(NCV_obs_all_g_temp==1)], 0, (R_NCV_temp[1]))
NCV_ll_temp_2=loglike_test(NCV_res_MC_temp[which(NCV_obs_all_g_temp==2)], 0, (R_NCV_temp[2]))
NCV_ll_temp_3=loglike_test(NCV_res_MC_temp[which(NCV_obs_all_g_temp==3)], 0, (R_NCV_temp[3]))
NCV_ll_temp_4=loglike_test(NCV_res_MC_temp[which(NCV_obs_all_g_temp==4)], 0, (R_NCV_temp[4]))
NCV_ll_temp_5=loglike_test(NCV_res_MC_temp[which(NCV_obs_all_g_temp==5)], 0, (R_NCV_temp[5]))
NCV_MC_LL_Final[jj,kk]=NCV_ll_temp_1+NCV_ll_temp_2+NCV_ll_temp_3+NCV_ll_temp_4+NCV_ll_temp_5
CV_ll_temp_1=loglike_test(CV_res_1[,jj], 0, R_CV_all_temp[1])
CV_ll_temp_2=loglike_test(CV_res_2[,jj], 0, R_CV_all_temp[2])
CV_ll_temp_3=loglike_test(CV_res_3[,jj], 0, R_CV_all_temp[3])
CV_ll_temp_4=loglike_test(CV_res_4[,jj], 0, R_CV_all_temp[4])
CV_ll_temp_5=loglike_test(CV_res_5[,jj], 0, R_CV_all_temp[5])
CV_LL_Final[jj,1]=CV_ll_temp_1+CV_ll_temp_2+CV_ll_temp_3+CV_ll_temp_4+CV_ll_temp_5
}
}
CV_RMSE_Final=(apply(CV_res_all,2,var)+apply(CV_res_all,2,mean)^2)^0.5
NCV_RMSE_Final=(apply(NCV_res_all,2,var)+apply(NCV_res_all,2,mean)^2)^0.5
name_RMSE=c()
name_LL=c()
for (z in 1:MC_t){
name_RMSE=cbind(name_RMSE, paste("RMSE_MC_",z,sep=""))
name_LL=cbind(name_LL, paste("LL_MC_",z,sep=""))
}
loglike_test = function(data, mu, sigma) {
loglike = 0
for(obs in data){
loglike = loglike +
log(1/(sqrt(2*pi)*sigma) *
exp(-1/2 * (obs - mu)^2/(sigma^2)))
}
return(loglike)
}
for (k in 1:5){
C_name=C_name_pool[k]
mlrfrog=mlrfrog_raw[which(mlrfrog_raw$Chemical != C_name),]
mlrfrog_CV=mlrfrog_raw[which(mlrfrog_raw$Chemical == C_name),]
#####Based on the correlation matrix, I can only keep a.Species, b.HabFac, c.logkoc,
mlrfrog_APP_ind=subset(mlrfrog,select=c(Species, HabFac, logkoc, logMol, logSol, logDen))
mlrfrog_APP_ind_CV=subset(mlrfrog_CV,select=c(Species, HabFac, logkoc, logMol, logSol, logDen))
####CHECK CORRELATIONS###########
cor_matrix=cor(subset(mlrfrog_APP_ind,select=-c(Species, HabFac)))
name_final_logAPP=paste("cor_matrix", "_", k, sep="")
assign(name_final_logAPP, (cor_matrix))
nod=dim(mlrfrog_APP_ind)[2]
detail_select=expand.grid(rep(list(c(TRUE,FALSE)),nod))
detail_select=detail_select[-which(detail_select$Var1==TRUE & detail_select$Var2==TRUE),]
row.names(detail_select)=NULL
names(detail_select)=names(mlrfrog_APP_ind)
regressors <- names(mlrfrog_APP_ind)
total_ita=dim(detail_select)[1]
R2_logAPP=array(dim=c(total_ita-1,12))
colnames(R2_logAPP)=c("R2", "Adj_R2", "AIC", "BIC", "MSE_T", "LL_T", "LL_R", "df_T", "df_R", "N_reg", "N_var", "RMSE_R")
###replace true and false in combination by variable names
detail_select_v=detail_select
d_names=names(detail_select)
for (i in d_names){
eval(parse(text=paste("detail_select_v$",as.name(i),"[", "detail_select_v$",as.name(i),"==",TRUE,"]=","i", sep="")))
eval(parse(text=paste("detail_select_v$",as.name(i),"[", "detail_select_v$",as.name(i),"==",FALSE,"]=",NA, sep="")))
}
detail_select_v[is.na(detail_select_v)] = " "
NCV_res=c()
CV_res=c()
NCV_obs=c()
CV_obs=c()
for (i in 1:(total_ita-1)){
vect=as.matrix(detail_select)[i,]
lm_temp=lm(as.formula(paste("mlrfrog$logAppFactor", paste(regressors[vect], collapse=" + "), sep="~")), data=subset(mlrfrog_APP_ind, select=regressors[vect]))
name_logAPP=paste("sum_logAPP", i, "_", k, sep="")
assign(name_logAPP, (lm_temp))
lm_temp_CV=predict(lm_temp, data.frame(mlrfrog_CV$logAppFactor, subset(mlrfrog_APP_ind_CV, select=regressors[vect])), se.fit = TRUE)
name_logAPP_CV=paste("sum_logAPP_CV", i, "_", k, sep="")
assign(name_logAPP_CV, (lm_temp_CV))
###creat a matrix to hold residules for final check##
NCV_res=cbind(NCV_res, lm_temp$residuals)
NCV_obs=cbind(NCV_obs, mlrfrog$logAppFactor)
CV_res_temp=lm_temp_CV$fit-mlrfrog_CV$logAppFactor
CV_res=cbind(CV_res, CV_res_temp)
CV_obs=cbind(CV_obs, mlrfrog_CV$logAppFactor)
R2_logAPP[i,1]=summary(lm_temp)$r.squared
R2_logAPP[i,2]=summary(lm_temp)$adj.r.squared
R2_logAPP[i,3]=AIC(lm_temp)
R2_logAPP[i,4]=BIC(lm_temp)
R2_logAPP[i,5]=sum(lm_temp_CV$fit-mlrfrog_CV$logAppFactor)^2/(dim(mlrfrog_CV)[1]-length(lm_temp$coefficients))
R2_logAPP[i,6]=loglike_test((lm_temp_CV$fit-mlrfrog_CV$logAppFactor), 0, R2_logAPP[i,5]^0.5)
R2_logAPP[i,7]=logLik(lm_temp)
R2_logAPP[i,8]=dim(mlrfrog_CV)[1]-length(lm_temp$coefficients)
R2_logAPP[i,9]=lm_temp$df.residual
R2_logAPP[i,10]=length(lm_temp$coefficients)-1
R2_logAPP[i,11]=sum(vect)
R2_logAPP[i,12]=summary(lm_temp)$sigma
}
colnames(NCV_res)=seq(1:dim(NCV_res)[2])
name_NCV_res=paste("NCV_res", "_", k, sep="")
assign(name_NCV_res, (NCV_res))
colnames(CV_res)=seq(1:dim(CV_res)[2])
name_CV_res=paste("CV_res", "_", k, sep="")
assign(name_CV_res, (CV_res))
colnames(NCV_obs)=seq(1:dim(NCV_obs)[2])
name_NCV_obs=paste("NCV_obs", "_", k, sep="")
assign(name_NCV_obs, (NCV_obs))
colnames(CV_obs)=seq(1:dim(CV_obs)[2])
name_CV_obs=paste("CV_obs", "_", k, sep="")
assign(name_CV_obs, (CV_obs))
name_R2_logAPP=paste("R2_logAPP", "_", k, sep="")
assign(name_R2_logAPP, (R2_logAPP))
###The highest R2(1), adjusted R2(2), lowest AIC(3) and BIC(4)
col_best_logAPP=c(apply(R2_logAPP,2,max)[1:2],apply(R2_logAPP,2,min)[3:4])
final_logAPP=c(which(R2_logAPP[,1]==col_best_logAPP[1]),which(R2_logAPP[,2]==col_best_logAPP[2]),
which(R2_logAPP[,3]==col_best_logAPP[3]),which(R2_logAPP[,4]==col_best_logAPP[4]))
name_final_logAPP=paste("final_logAPP", "_", k, sep="")
assign(name_final_logAPP, (final_logAPP))
}
CV_res_all=rbind(CV_res_1,CV_res_2,CV_res_3,CV_res_4,CV_res_5)
NCV_res_all=rbind(NCV_res_1,NCV_res_2,NCV_res_3,NCV_res_4,NCV_res_5)
NCV_obs_all=rbind(NCV_obs_1,NCV_obs_2,NCV_obs_3,NCV_obs_4,NCV_obs_5)
NCV_obs_all_g=cbind(c(rep(1, dim(NCV_obs_1)[1]), rep(2, dim(NCV_obs_2)[1]), rep(3, dim(NCV_obs_3)[1]),
rep(4, dim(NCV_obs_4)[1]), rep(5, dim(NCV_obs_5)[1])))
R_NCV_all=cbind(R2_logAPP_1[,12],R2_logAPP_2[,12],R2_logAPP_3[,12],R2_logAPP_4[,12],R2_logAPP_5[,12]) #RMSE training
R_CV_all=cbind(R2_logAPP_1[,5],R2_logAPP_2[,5],R2_logAPP_3[,5],R2_logAPP_4[,5],R2_logAPP_5[,5])^0.5  #RMSE testing
LL_NCV_all=rowSums(cbind(R2_logAPP_1[,7],R2_logAPP_2[,7],R2_logAPP_3[,7],R2_logAPP_4[,7],R2_logAPP_5[,7])) #LL training
CV_obs_all=rbind(CV_obs_1,CV_obs_2,CV_obs_3,CV_obs_4,CV_obs_5)
MC_t=1000
NCV_MC_RMSE_Final=data.frame(matrix(ncol = MC_t, nrow = 47))
NCV_MC_LL_Final=data.frame(matrix(ncol = MC_t, nrow = 47))
CV_LL_Final=data.frame(matrix(ncol = 1, nrow = 47))
for (kk in 1:MC_t){
NCV_obs_MC_index=apply(NCV_obs_all, 2, function(t) sample(length(t), 131, replace=TRUE))  #draw 131 samples of each combinaions
for (jj in 1:dim(NCV_obs_all)[2]){
NCV_res_MC_temp=NCV_res_all[NCV_obs_MC_index[,jj],jj]
NCV_obs_all_g_temp=NCV_obs_all_g[NCV_obs_MC_index[,jj]]
R_NCV_temp=R_NCV_all[jj,]
R_CV_all_temp=R_CV_all[jj,]
NCV_MC_RMSE_Final[jj,kk]=(var(NCV_res_MC_temp)+mean(NCV_res_MC_temp)^2)^0.5
NCV_ll_temp_1=loglike_test(NCV_res_MC_temp[which(NCV_obs_all_g_temp==1)], 0, (R_NCV_temp[1]))
NCV_ll_temp_2=loglike_test(NCV_res_MC_temp[which(NCV_obs_all_g_temp==2)], 0, (R_NCV_temp[2]))
NCV_ll_temp_3=loglike_test(NCV_res_MC_temp[which(NCV_obs_all_g_temp==3)], 0, (R_NCV_temp[3]))
NCV_ll_temp_4=loglike_test(NCV_res_MC_temp[which(NCV_obs_all_g_temp==4)], 0, (R_NCV_temp[4]))
NCV_ll_temp_5=loglike_test(NCV_res_MC_temp[which(NCV_obs_all_g_temp==5)], 0, (R_NCV_temp[5]))
NCV_MC_LL_Final[jj,kk]=NCV_ll_temp_1+NCV_ll_temp_2+NCV_ll_temp_3+NCV_ll_temp_4+NCV_ll_temp_5
CV_ll_temp_1=loglike_test(CV_res_1[,jj], 0, R_CV_all_temp[1])
CV_ll_temp_2=loglike_test(CV_res_2[,jj], 0, R_CV_all_temp[2])
CV_ll_temp_3=loglike_test(CV_res_3[,jj], 0, R_CV_all_temp[3])
CV_ll_temp_4=loglike_test(CV_res_4[,jj], 0, R_CV_all_temp[4])
CV_ll_temp_5=loglike_test(CV_res_5[,jj], 0, R_CV_all_temp[5])
CV_LL_Final[jj,1]=CV_ll_temp_1+CV_ll_temp_2+CV_ll_temp_3+CV_ll_temp_4+CV_ll_temp_5
}
}
CV_RMSE_Final=(apply(CV_res_all,2,var)+apply(CV_res_all,2,mean)^2)^0.5
NCV_RMSE_Final=(apply(NCV_res_all,2,var)+apply(NCV_res_all,2,mean)^2)^0.5
name_RMSE=c()
name_LL=c()
for (z in 1:MC_t){
name_RMSE=cbind(name_RMSE, paste("RMSE_MC_",z,sep=""))
name_LL=cbind(name_LL, paste("LL_MC_",z,sep=""))
}
#check convergence
NCV_MC_RMSE_Final_mean=apply(NCV_MC_RMSE_Final,1,mean)  #compare to NCV_RMSE_Final
NCV_MC_LL_Final_mean=apply(NCV_MC_LL_Final,1,mean)
Final_RMSE=data.frame(R2_logAPP[,10], R2_logAPP[,11], CV_RMSE_Final, NCV_RMSE_Final, NCV_MC_RMSE_Final)
names(Final_RMSE)=c('N_reg','N_var','RMSE_T','RMSE_R_A', name_RMSE)
Final_LL=data.frame(R2_logAPP[,10], R2_logAPP[,11], CV_LL_Final, NCV_MC_LL_Final_mean, NCV_MC_LL_Final)
names(Final_LL)=c('N_reg','N_var','LL_T', 'LL_R_Mean', name_LL)
View(Final_RMSE)
lm_temp
summary(lm_temp)
summary(lm_temp)$sigma
b=summary(lm_temp)$residual
b
mean(v)
mean(b)
var(b)
var(b)^0.5
(summary(lm_temp)$sigma)**2
df.residual(lm_temp)
names(lm_temp)
length(lm_temp$residuals)
lm.sigma
lm
summary(lm)
summary.lm()$sigma
summary.lm()
length(lm_temp$residuals)
summary(lm_temp)
var(summary(lm_temp)$redisual)/97
summary(lm_temp)$redisual
lm_temp
summary(lm_temp)
names(lm_temp)
var(lm_temp$residuals)
(var(lm_temp$residuals)/97)^0.5
(var(lm_temp$residuals)/90)^0.5
summary(lm_temp)$sigma
sum(lm_temp$residuals)
sum(lm_temp$residuals^2)
sum(lm_temp$residuals^2)/97
(sum(lm_temp$residuals^2)/97)^0.5
(sum(lm_temp$residuals^2)/90)^0.5
var(lm_temp$residuals)^0.5
var(lm_temp$residuals)^0.5+mean(lm_temp$residuals)^2
(sum(lm_temp$residuals^2)/97)^0.5
var(lm_temp$residuals)^0.5+mean(lm_temp$residuals)^2
